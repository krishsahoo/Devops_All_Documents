
Project 1
=========


## Deploy the war file on tomcat-8 using jenkins

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 



java set

java -version
find /usr/lib/jvm/java-1.8* | head -n 3
#JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64
export JAVA_HOME
PATH=$PATH:$JAVA_HOME
# To set it permanently update your .bash_profile
source ~/.bash_profile


=========================================================================

Git Plugin
Maven Plugin 
Deploy to container plugin
Git Hub Account /Scm Source
Tomcat



warfile URL => https://updates.jenkins-ci.org/download/war/


=============================================================================
=> install javajdk 

set java_home path in~/.bash_profile 

vim ~/.bash_profile 

export CATALINA_HOME=/opt/apache-tomcat-8.5.54
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk

:wq! 

source ~/.bash_profile 

==============================================================================

=>Install apache-tomcat

=> tar xvf package

=> Go to conf folder 

=> cd /apache/conf/

=> vim tomcat-users.xml

<tomcat-users>
         <role rolename="manager-gui"/>
        <user username="admin" password="Password" roles="manager-gui, manager-script, manager-status"/>

</tomcat-users>

=> Go to webapps/manager/meta-inf/

vim context.xml

=> change this line give like this  " allow=".*" /> "

=> Go to Crome give ip:8080

## step 1 :

=> Go to jenkins server 

=> Create Free-Style job 

=> Go to under job configure 

=> Select git repo and give the package of git repo URL

=> scroll down select "BUILD Option" under select invoke top level Maven-Project 

  Mvn install
  
=> Go to Post_Build_Actions under select deploy war/ear to container 

=> give tomcat server url 

=> Apply & Save Click on Build Option  

## Step 2 :

=> Go to Apche tomcat Server

=> Check there package is installed or what 

================================================================================= 
2nd way to deploy war file using jenkins 


Same as above steps only but in docker you need to write the docker-file nd build the imgae nd run the container 

vim docker.yml 

FROM tomcat:8
MAINTAINER 
RUN yum install java -y 
RUN yum install wget -yml
RUN mkdir /opt/tomcat 
RUN cd /opt/tomcat && wget download tomcat.gz file
RUN cd /opt/tomcat && tar xvf tomcat.gz file 
COPY tomcat-users.xml /opt/tomcat/conf/
COPY server.xml /opt/tomcat/conf 

:wq!

docker build -t tomcat-deploy docker.yml 

=> docker images

=> docker run -itd --name tomcat-8 -p 8083:8080 tomcat:8

=> docker ps 

=> take the server ip:port number

=> http://ip:8083 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2) Project-2 | CI/CD pipeline using GIT, Jenkins & Ansible
=======================================================


=> Enable password less authentication b/w ansible and tomcat server 

=> Install publish over ssh plugin on jenkins 

=> write a playbook to copy jar/war on to tomcat server 

=> Modify jenkins job to copy artifacts and initiate ansible playbooks 


===========================================================================

Step 1 : Install the tomcat package and extract that package need to able to login server 

step 2 : install ansible and go to hosts give tomcat server ip onto hosts and check there through ansible commands

Step 3 : Go to Jenkins manage plugin download the publish over ssh plugin and configure it onto jenkins system configure 

SSsh plugin purpose we need to play the playbooks on ansible server that's why this plugin is required 

step 4 : write a play book in ansible server

vim copyfile.yml 

---
- hosts: nodes
  become: true 
  tasks:
    - name: copy war onto tomcat server 
      copy:
        src: /etc/ansible/sample.war 
        dest: /opt/apache-tomcat-8.5.54/webappss 
:wq!

Step 5 : Go to job under you ned give git hub url and maven goals 

Step 6: Postbuild actions you need to select publish over plugin you should give 

  target server name, src des path and give the ansible play book commands
  
Step 7: Apply&Save 

=========================================================================================  

3) nexus artifactory up-loader pipeline | Jenkins pipeline code Real-time

=========================================

Jenkins apachetomcat up and running 

declarative pipeline (2.6+)
pipeline utility steps 
Nexus Artifactory Uploader

=> These 3 plugins required to install this why because we need to upload the artifacts onto nexus

this is my requirement and this is the free requisities to execute our pipeline code 

Step 1: Get the source code from central repository

Step 2: Build the package using Maven 

Step 3: Configure the Nexus

Step 4: Push Nexus server 

Step 5: Download artifact from nexus 

Step 6: deploy to tomcat 

============================================================================================


Step 1: Create a New pipeline project 

Step 2: Select pipeline scripting and write declarative pipeline script 

pipeline {
    agent {
        label "master"
    }
    tools {
         // Note : this should match with the tool name configured in your jenkins instance "Maven"
    }

    environment {
        // This can be nexus3 or nexus2
        NEXUS_VERSION="nexus3"
        // This can be http or https 
        NEXUS_PROTOCOL="http"
        // Where your nexus is running 
        NEXUS_URL="localhost:8080"
        // repository where we will upload the artifact
        NEXUS_REPOSITORY="JAVA_SPRING"
        // Jenkins credential id to authenticate to nexus oss 
        NEXUS_CREDENTIAL_ID="nexus credentials"
   
     }
  
     stages {
          stage ("clone code") {
          	  steps {
                  script {
                      // Let's clone the source 
                      git 'URL';					  
                   }
				   
				}
			
		 }
		 
		 stage("maven build") {
		     steps {
			     script {
				     // If you are using windows then you should use "bat" step 
                     // Since unit testing is out of the scope we skip them 
                     bat(/${MAVEN_HOME}\bin\mvn -Dmaven.test.failure.ignore clean package/)
                  }
      
              }
      
           }
           stage ( "publish to Nuxus") {
               steps {		   
		           script {
				   // Read pom xml file using 'read maven pom' step, this step 'read maven pom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
				   pom = read maven pom file: "pom.xml";
				   // find artifact under target folder 
				   filesbyglob = findfiles(glob: "target/*.${pom.packaging}");
				   // print some information from the artifact found
				   echo "${filesbyglob [0].name} ${filesbyglob [0].path} ${filesbyglob [0].directory} ${filesbyglob [0].length} $(filesbyglob [0].lastmodified}"
				   // Extract the path from the file found 
				   artifactpath = filesbyglob [0].path;
				   // Assign to a boolean to response verifying if the artifact name is exists
				   artifactExists = fileExists artifactpath;
				   if(artifactExists)  {
				   echo "*** File: ${artifactpath}, group: ${pom.groupid}, packaging: ${pom.packaging}, version ${pom.version}
				   nexusartifactuploader(
				       nexusVersion: NEXUS_VERSION,
					   protocol: NEXUS_PROTOCOL,
					   NEXUSURL: NEXUS_URL,
					   groupid: pom.groupid,
                       version: '${BUILD_NUMBER}',
                       repository: Nexus_repository,
                       credentialsid: NEXUS_CREDENTIAL_ID,
                       artifacts: [
                           // Artifact generated such as .jar, .ear, .war files. 
                           [artifactid: pom.artifactId,
                            classifier: '',
                            file: artifactpath,
                            type: pom.packaging],
							// Let's upload the pom.xml file for additional information for transitive dependencies 
							[artifactid: pom.artifactid,
							classifier: '',
							file: "pom.xml",
                            type: "pom"]
                   
                       ]
                   );
               } else {
                   error "*** File: $(artifactpath}, could not be found",

                 }

                 stage ("deploy") {
                     steps {
                         script {
                             bat ''' F:\\devops\\softwares\\curl-7\\bin\\curl give here nexus war file path 
                       }

                    }
                }
            }
         }

	
Execute the script in that job under pipeline script option	

Step 3: Apply & Save build the job

==============================================================

## Multi Branch Pipeline 
------------------------

It's working for create a new build for every branch 

=> Install the multi branch pipeline 

=> Create the multi branch job and let me go to under the job 

=> In that we need to select git hub project 

=> Build the job 

=> It's displayed how many branches are there then build the code from each and every branch

=> Go inside the job and we can find out how many branches are there  

=> Again we can create new branch inside the github project then trigger the build and check the output and allow

=========================================================================================================



					   